name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # build:
  #   needs: unit-testing
  #   name: Build release version
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Installing toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - name: Build the project
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --release --all-features

  # unit-testing:
  #   name: Unit testing
  #   environment: unit-testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Installing toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable

  #     - name: Setup docker with postgres
  #       run: |
  #         # Build a docker image with postgres
  #         docker build -t postgres-db -f Docker/postgres.dockerfile .

  #         # Run a docker container with postgres
  #         docker run -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -d -p 5432:5432 postgres-db

  #     - name: Run unit tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test

  #       env:
  #         DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #         POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  #         ARGON2_SALT: ${{ secrets.ARGON2_SALT }}

  #         SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
  #         SMTP_PASSWORD: ${{ secrets. SMTP_PASSWORD }}
  #         SMTP_HOST: ${{ secrets.SMTP_HOST }}

  server-deployment:
    # needs: [build, unit-testing]
    name: Server deployment
    runs-on: ubuntu-latest
    steps:
      - name: Deploy server software
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            # Go to the working directory
            cd ${{ secrets.WORK_DIR }}

            # Backup database
            docker exec -t postgres pg_dumpall -c -U admin > dump_`date +%d-%m-%Y"_"%H_%M_%S`.sql

            # Shut down docker-compose
            docker compose down

            # Checkout branch
            git checkout ${{ secrets.MAIN_BRANCH }}

            # Pull latest changes
            git pull

            # Remove all docker images
            docker image prune -a -f

            # Remove all volumes
            docker volume prune -f

            # Start docker compose
            docker compose up -d

            # Sleep for 10 seconds
            sleep 10

            # Restore database
            cat dump*.sql | docker exec -i postgres psql -U admin -d manuspect

            # Remove the generated file with database backup
            rm dump*.sql

        env:
          DB_HOST: localhost
